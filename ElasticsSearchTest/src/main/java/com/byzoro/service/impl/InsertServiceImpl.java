package com.byzoro.service.impl;import com.byzoro.EsClient;import com.byzoro.service.InsertService;import org.elasticsearch.action.bulk.BulkRequestBuilder;import org.elasticsearch.action.index.IndexResponse;import org.elasticsearch.client.transport.TransportClient;import org.springframework.beans.factory.annotation.Autowired;import java.util.HashMap;/** * @author huanyuguo * @date 2018/5/10 11:43 */public class InsertServiceImpl implements InsertService {    @Autowired    private EsClient client;    /**     * @Describe  TODO: 单条插入,设定主键id，以防重复     * @Param [index, type, hashMap]     * @return java.lang.String     * @author huanyuguo     * @date 2018/5/10 13:58    **/    @Override    public String addIndex(String index, String type, HashMap<String, Object> hashMap) {        TransportClient client = new EsClient().getConnection();        try {            IndexResponse response = client.prepareIndex(index, type,hashMap.get("id").toString())                    .setSource(hashMap).execute().actionGet();            System.out.println(response.getId());            return response.getId();  //TODO: 返回主键        } catch (Exception e) {            return null;        }finally{            client.close();//TODO: 关闭连接        }    }    /**     * @Describe TODO: 一条数据循环批量插入     * @Param [index, type, hashMap]     * @return void     * @author huanyuguo     * @date 2018/5/10 14:01    **/    @Override    public void addAllIndex(String index, String type, HashMap<String, Object> hashMap) {        TransportClient client = new EsClient().getConnection();        try {            BulkRequestBuilder bulkRequest = client.prepareBulk();            //TODO: 共插入1000次            for (int i = 0; i < 1000; i++) {                bulkRequest.add(client.prepareIndex(index, type).setSource(hashMap));                //TODO: 每100条提交一次                if (i % 100 == 0) {                    bulkRequest.execute().actionGet();                }            }        } catch (Exception e) {        }finally{            client.close();        }    }}