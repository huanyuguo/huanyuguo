package com.byzoro;import com.alibaba.fastjson.JSONObject;import com.byzoro.service.impl.InsertServiceImpl;import org.elasticsearch.action.ActionListener;import org.elasticsearch.action.bulk.BulkRequestBuilder;import org.elasticsearch.action.get.GetResponse;import org.elasticsearch.action.index.IndexResponse;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.action.search.SearchType;import org.elasticsearch.client.transport.TransportClient;import org.elasticsearch.common.document.DocumentField;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.index.reindex.BulkByScrollResponse;import org.elasticsearch.index.reindex.DeleteByQueryAction;import org.elasticsearch.search.SearchHit;import org.elasticsearch.search.SearchHits;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.junit.Test;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;/** * @author huanyuguo * @date 2018/5/10 13:37 */public class test {    /**     * @return     * @Describe TODO: 单条插入,设定主键id，以防重复     * @Param     * @author huanyuguo     * @date 2018/5/10 13:53     **/    @Test    public void addIndex() {        HashMap<String, Object> hashMap = new HashMap<>();        hashMap.put("company_id", "35542334");        hashMap.put("company_name", "苏州明仁电力开发有限公司");        hashMap.put("company_other_name", "明仁电力");        hashMap.put("indus_commerce_register", "91320508592520690W ");        hashMap.put("organiza_struct_code", "11or17");        hashMap.put("establish_time", "2012-03-20");        hashMap.put("legal_representa_staff_id_card", " ");        hashMap.put("legal_representa_name", "张三");        hashMap.put("legal_rep_telephone", "11234567893");        hashMap.put("legal_rep_email", "zhangsan@qq.com");        hashMap.put("registered_address", " 苏州姑苏");        hashMap.put("postal_code", "215028");        hashMap.put("econo_type_code", "20ec22");        hashMap.put("administra_area_code", "320333");        hashMap.put("indu_categ_code", "24E");        hashMap.put("Adminis_subord_enterp_code", "11");        hashMap.put("scope_of_business", "13E");        hashMap.put("company_state_code", "1");        hashMap.put("company_positi_longitu", "131.526001");        hashMap.put("company_positi_latitu", "34.161400");        hashMap.put("creater", "admin");        hashMap.put("create_time", "2018-05-03 17:26:01");        hashMap.put("create_unit", "");        hashMap.put("Renewing", "");        hashMap.put("Rene_time", "");        hashMap.put("Rene_unit", "");        hashMap.put("Effective_sign", "");        TransportClient client = new EsClient().getConnection();        try {            IndexResponse response = client.prepareIndex("smart_city", "company_base_info",                    hashMap.get("company_id").toString())                    .setSource(hashMap).execute().actionGet();            System.out.println(response.getId());        } catch (Exception e) {            e.printStackTrace();        } finally {            client.close();//TODO: 关闭连接        }    }    /**     * @return void     * @Describe TODO: 批量插入数据     * @Param []     * @author huanyuguo     * @date 2018/5/10 14:10     **/    @Test    public void addIndex2() {        InsertServiceImpl insertService = new InsertServiceImpl();        HashMap<String, Object> hashMap = new HashMap<>();        hashMap.put("id", 1);        hashMap.put("title", "斗罗大陆");        hashMap.put("describe", "玄幻小说");        hashMap.put("author", "唐家三少");        insertService.addIndex("book", "novel", hashMap);    }    /**     * @Describe 读取json文件并转换成Map     * @Param     * @return     * @author huanyuguo     * @date 2018/5/11 8:04    **/    @Test    public void Json2Map() {        BufferedReader br = null;        try {            br = new BufferedReader(new FileReader("D:/file/company_base_info1.json"));            String json = null;            while ((json = br.readLine()) != null) {                String subjson = json.substring(0, json.lastIndexOf(","));                //TODO: 这个是用JSONObject的parseObject方法并执行返回类型来解析JSON字符串!!!                Map hashMap = JSONObject.parseObject(subjson, Map.class);                for (Object map: hashMap.entrySet()){                    System.out.println(((Map.Entry)map).getKey()+"  "+((Map.Entry)map).getValue());                }                System.out.println(hashMap);            }        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * @return     * @Describe TODO: 批量导入json数据     * @Param     * @author huanyuguo     * @date 2018/5/10 21:04     **/    @Test    public void addJsonData() {        EsClient client = new EsClient();        String filename="D:/file/company_base_info.json";        try {            //TODO: 读取json数据            BufferedReader br = new BufferedReader(new FileReader(filename));            String json = null;            int count = 0;            //TODO: 开启批量插入            BulkRequestBuilder bulkRequest = client.getConnection().prepareBulk();            while ((json = br.readLine()) != null) {                //TODO: 去除每行最后的逗号                String subjson = json.substring(0, json.lastIndexOf(","));                //TODO: 将json字符串转换成Map                Map hashMap = JSONObject.parseObject(subjson, Map.class);                //TODO；setId方法可以指定index中的_Id字段的值，否则的话，es会自动生成id，可能造成数据的重复存储                bulkRequest.add(client.getConnection().prepareIndex("smart_city", "company_base_info")                        .setId("00000" + count).setSource(hashMap));                        if(count%9==0){                            bulkRequest.execute().actionGet();                            System.out.println("提交了: " + count+" 条记录");                        }                        count++;            }            bulkRequest.execute().actionGet();            System.out.println("插入完毕");            br.close();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * @return     * @Describe TODO:   根据index，type，id，查找某一条数据     * @Param     * @author huanyuguo     * @date 2018/5/10 14:33     **/    @Test    public void get() {        EsClient client = new EsClient();        GetResponse response = client.getConnection().prepareGet("dept", "employee", "3435").get();        Map<String, DocumentField> fields = response.getFields();        System.out.println("map:" + fields);        Map<String, Object> source = response.getSource();        System.out.println(source);    }    /**     * @return     * @Describe TODO: 删除某id的内容     * @Param     * @author huanyuguo     * @date 2018/5/10 14:45     **/    @Test    public void del() {        EsClient client = new EsClient();        String id = "22406962";        DeleteByQueryAction.INSTANCE.newRequestBuilder(client.getConnection()).                filter(QueryBuilders.matchQuery("_id", id)).source("smart_city")                .execute(new ActionListener<BulkByScrollResponse>() {                    public void onResponse(BulkByScrollResponse response) {                        long deleted = response.getDeleted();                        System.out.println("delete" + deleted);                    }                    public void onFailure(Exception e) {                    }                });    }    /**     * @return     * @Describe TODO: 更新索引     * @Param     * @author huanyuguo     * @date 2018/5/10 14:45     **/    @Test    public void update() throws IOException {        EsClient client = new EsClient();        String id = "3434";        client.getConnection().prepareUpdate("dept", "employee", id)                .setDoc(jsonBuilder()                        .startObject()                        .field("name", "guotou")                        .endObject()).get();        System.out.println("...................");    }    @Test    public void Search(){        EsClient client = new EsClient();        SearchResponse searchResponse = client.getConnection().prepareSearch("smart_city")                .setTypes("company_base_info")                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)                .setQuery(QueryBuilders.matchQuery("company_other_name", "苗木"))//                .setPostFilter(QueryBuilders.rangeQuery("age").from(19).to(400))                .setFrom(0).setSize(20).setExplain(true)                .get();        SearchHits hits = searchResponse.getHits();        List<Map> mapArrayList = new ArrayList<>();        for (SearchHit hit : hits) {            Map<String, Object> resultMap = hit.getSourceAsMap();            mapArrayList.add(resultMap);        }        System.out.println(mapArrayList);    }}